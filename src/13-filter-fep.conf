filter {
		
if ([type] == "endpointlog" )  {
    # Manipulate the message
    mutate {
         # Saved the original message into a temporary field
         add_field => { "tmp_message" => "%{message}" }
         # splits message on the "|"  and has index numbers
         split => ["message", "|"]
         # generate fields for the CEF header
         add_field => { "cef_version" => "%{message[0]}" }
         add_field => { "cef_device_vendor" => "%{message[1]}" }
         add_field => { "cef_device_product" => "%{message[2]}" }
         add_field => { "cef_device_version" => "%{message[3]}" }
         add_field => { "ev_classID" => "%{message[4]}"}
         add_field => { "ev_name" => "%{message[5]}" }
         add_field => { "severity" => "%{message[6]}" }
         add_field => { "cef_rest_of_message" => "%{message[7]}" }
    }
    # Parse the message with field=value formats

 #      grok {
#       match => { "cef_rest_of_message" => "sourceZoneURI=%{GREEDYDATA:szu} spt.*destinationZoneURI=%{GREEDYDATA:dzu} dpt=.*"}
#       }

    kv {
        # Note: values with spaces are lost (still getting there)
         value_split => "="
         trim_key => "<>\[\],"
         trim_value => "<>\[\],"
         # Only included the fields which are of interest (dont need everything)
         include_keys => ["ev_name","severity","eventId","cat","deviceSeverity","act","outcome","dntdom","duser","dproc","filePath","cs1"]
    }

            grok {
                match => [ "filePath", "%{GREEDYDATA:file_path}\\%{GREEDYDATA:file_name}" ]   
		match => [ "dproc", "%{GREEDYDATA:process_name}" ]
		tag_on_failure => [ ]
		}


    mutate {
        # Rename fields to cef_field_names
        rename => [ "cat",    "malware_category"]
        rename => [ "eventId",    "ev_id"]
        rename => ["deviceSeverity", "severity_rating"]
        rename => ["act", "action_taken"]
        rename => [ "outcome",  "action_outcome"]
        rename => [ "dntdom",    "domain"]
        rename => [ "duser",    "src_username"]
        rename => [ "fileType", "file_type"]
        rename => [ "cs1", "malware_family"]

        # Revert original message and remove temporary field
        replace => { "message" => "%{tmp_message}" }
        remove_field => [ "tmp_message" ]
        remove_field => [ "dproc", "filePath", "at", "cef_rest_of_message", "cef_device_version", "cef_device_product","cef_device_vendor","ev_classID", "cef_version" ]
        }

        mutate {
                remove_field => [ '[geoip][continent_code]','[geoip][location]'  , '[geoip][country_code3]', '[geoip]dma_code]' , '[geoip][ip]','[geoip][latitude]', '[geoip][longitude]', '[geoip][postal_code]', '[geoip][region_name]', '[geoip][area_code]']
        }

 }
	
}

