filter {

if ([type] == "bluecoatlog" )  {
    # Manipulate the message
    mutate {
         # Saved the original message into a temporary field
         add_field => { "tmp_message" => "%{message}" }
         # splits message on the "|"  and has index numbers
         split => ["message", "|"]
         # generate fields for the CEF header
         add_field => { "cef_version" => "%{message[0]}" }
         add_field => { "device_vendor" => "%{message[1]}" }
         add_field => { "device_product" => "%{message[2]}" }
         add_field => { "ev_classID" => "%{message[4]}" }
         add_field => { "ev_sig_name" => "%{message[5]}" }
         add_field => { "ev_sig_severity" => "%{message[6]}" }
	 add_field => { "cef_rest_of_message" => "%{message[7]}" }
    }
    # Parse the message with field=value formats
    
#	grok {
#		match => { "cef_rest_of_message" => "sourceZoneURI=%{GREEDYDATA:szu} spt.*destinationZoneURI=%{GREEDYDATA:dzu} dpt=.*"}
#	}	

    kv {
        # Note: values with spaces are lost (still getting there)
         value_split => "="
         trim_key => "<>\[\],"
         trim_value => "<>\[\],"
         # Only included the fields which are of interest (dont need everything)
         include_keys => ["in","out","deviceSeverity","act","src","dst","suser","request","requestMethod","requestClientApplication","cs4","cs6","requestProtocol","requestUrlHost","requestUrlFileName","requestUrlPort"]
    }



    mutate {

        # Rename fields to cef_field_names
       # rename => [ "cat",    "cef_traffic_category"]
        rename => [ "act",    "action_taken"]
	rename => ["suser", "src_username"]
	rename => ["cs4", "categories"]
	rename => ["cs6", "access_rights"]
	rename => ["deviceSeverity", "http_resp_code"]
        rename => [ "requestProtocol",  "protocol"]
        rename => [ "dst",    "dst_ip"]
        rename => [ "requestUrlHost",    "dst_domain"]
	rename => ["requestUrlFileName", dst_uri_path]
	rename => ["requestUrlPort", "dst_port"]
        rename => [ "src",    "src_ip"]
        #rename => [ "in",    "bytes_in"]
	#rename => ["out", "bytes_out"]
	rename => ["requestMethod", "http_method"]
	rename => ["request", "dst_url"]
	rename => ["requestClientApplication", user_agent]
	rename => [ "device_product", "device_product"]
	rename => ["device_vendor", "device_vendor"]
	rename => ["ev_sig_name", "signature_name"]
	rename => ["ev_sig_severity", "severity"]                
	}

	mutate {
        convert => {"in" => "integer"}
        convert => {"out" => "integer"}
                }

	mutate {
        # Revert original message and remove temporary field
        replace => { "message" => "%{tmp_message}" }
        remove_field => [ "tmp_message" ]
	remove_field => [ "message" , "ev_classID", "cef_rest_of_message","cef_version" ]
	}

	#mutate {
        #convert => {"in" => "integer"}
        #convert => {"out" => "integer"}
	#	}
	
	grok {
		match => [ "dst_domain", ".*/%{GREEDYDATA:downloaded_file}" ]
		tag_on_failure => [ ]
	}

	mutate {
		remove_field => [ '[geoip][continent_code]','[geoip][location]'  , '[geoip][country_code3]', '[geoip]dma_code]' , '[geoip][ip]','[geoip][latitude]', '[geoip][longitude]', '[geoip][postal_code]', '[geoip][region_name]', '[geoip][area_code]']
	}
 }

          useragent {
                source => "user_agent"
                target => "ua"
                }
          translate {
                field => "dst_domain"
                destination => "DynamicDomain"
                dictionary_path => "/home/manoj/scripts/Dyn_Domains/Dynamic_Dns_blacklist1.yaml"
                fallback => "Negative"
                destination => "DynamicDomain"
                }

	         translate{
	                field => "dst_domain"
	                dictionary_path => "/home/manoj/scripts/WhitelistedDomain/WhitelistedDomains.yaml"
	                add_tag => ["whitelisted_domains"]
	                }
	        if "whitelisted_domains" in [tags]
	                {
	                drop{}
	                }


# Toggle block to see dropped firewall rules
#if [act] == "drop" {
#	drop{ }
#	}

# Toggle block to see dropped logs if country is india
#if [geoip][country_name] == "India"{
#	drop { }
#	}	
}

