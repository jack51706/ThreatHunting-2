filter {

if ([type] == "checkpointlog" )  {
    # Manipulate the message
    mutate {
         # Saved the original message into a temporary field
         add_field => { "tmp_message" => "%{message}" }
         # splits message on the "|"  and has index numbers
         split => ["message", "|"]
         # generate fields for the CEF header
         add_field => { "cef_version" => "%{message[0]}" }
         add_field => { "cef_device_vendor" => "%{message[1]}" }
         add_field => { "cef_device_product" => "%{message[2]}" }
         add_field => { "cef_device_version" => "%{message[3]}" }
         add_field => { "cef_sig_id" => "%{message[4]}" }
         add_field => { "cef_sig_name" => "%{message[5]}" }
         add_field => { "cef_sig_severity" => "%{message[6]}" }
	 add_field => { "cef_rest_of_message" => "%{message[7]}" }
    }
    # Parse the message with field=value formats
    
 #	grok {
#	match => { "cef_rest_of_message" => "sourceZoneURI=%{GREEDYDATA:szu} spt.*destinationZoneURI=%{GREEDYDATA:dzu} dpt=.*"}
#	}		

    kv {
        # Note: values with spaces are lost (still getting there)
         value_split => "="
         trim_key => "<>\[\],"
         trim_value => "<>\[\],"
         # Only included the fields which are of interest (dont need everything)
         include_keys => ["act","proto","dst","dpt","src","spt","at","ahost","dvchost","destinationServiceName"]
    }

    mutate {
        # Rename fields to cef_field_names
       # rename => [ "cat",    "cef_traffic_category"]
        rename => [ "act",    "action_taken"]
        rename => [ "proto",  "protocol"]
        rename => [ "dst",    "dst_ip"]
        rename => [ "dpt",    "dst_port"]
        rename => [ "src",    "src_ip"]
        rename => [ "spt",    "src_port"]
	rename => [ "cef_device_product",    "device_product"]
	rename => ["ahost", "logsource_hostname"]
	rename => ["cef_device_vendor", "device_vendor"]
	rename => ["cef_sig_name", "signature_name"]
	rename => ["cef_sig_severity", "severity"]
	rename => ["host", "logsource_ip"]
        # Revert original message and remove temporary field
        replace => { "message" => "%{tmp_message}" }
        remove_field => [ "tmp_message" ]
	remove_field => [ "message" , "at", "cef_rest_of_message", "cef_device_version", "cef_sig_id", "cef_version" ]
	} 
    geoip{
	source => "dst_ip"
	}

	mutate {
		remove_field => [ '[geoip][continent_code]','[geoip][location]'  , '[geoip][country_code3]', '[geoip]dma_code]' , '[geoip][ip]','[geoip][latitude]', '[geoip][longitude]', '[geoip][postal_code]', '[geoip][region_name]', '[geoip][area_code]']
	}

        translate{
                field => "src_ip"
                destination => "IoC-Ingress"
                dictionary_path => "/home/manoj/scripts/IoC/maliciousIPs.yaml"
                fallback => "Negative"
                refresh_interval => 10
                }
        if [IoC-Ingress] == "YES" {
                mutate {
                        add_tag => ["IOC-Alert"]
                        }
                }

        translate{
                field => "dst_ip"
                destination => "IoC-Egress"
                dictionary_path => "/home/manoj/scripts/IoC/maliciousIPs.yaml"
                fallback => "Negative"
                refresh_interval => 10
                }
        if [IoC-Ingress] == "YES" {
                mutate {
                        add_tag => ["IOC-Alert"]
                        }
                }
 }

# Toggle block to see dropped firewall rules
#if [act] == "drop" {
#	drop{ }
#	}

# Toggle block to see dropped logs if country is india
#if [geoip][country_name] == "India"{
#	drop { }
#	}	
}

